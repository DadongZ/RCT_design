---
title: "Phase I PK/PD Analysis using the Two-Stage Approach"
author: "Dadong Zhang, Sr. Staff Biostatician"
format: 
  pdf:
    toc: true
    number-sections: false
    colorlinks: true
editor: visual
execute:
  echo: false
  warning: false
  message: false
---

```{r global}
rm(list = ls())
# Load required packages
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gridExtra)
library(nlmixr2)
library(conflicted)
library(flextable)
conflict_prefer("filter", "dplyr")
source("../src/func.R")
data(warfarin)
```

{{< pagebreak >}}

# Introduction

This document provides a comprehensive pharmacokinetic/pharmacodynamic (PK/PD) analysis using a nonlinear least squares method (two-stage approach). The source data were from the PhaseI/II study of drug candidate (RDX101) provided by the client that contains both PK measurements (plasma concentrations) and PD measurements (PCA).

### Table 1. Number of PK and PD observations per subject (Only 10 displayed)

```{r}
# Check for missing values
# sum(is.na(warfarin$dv))

# Create separate datasets for PK and PD analysis
pk_data <- warfarin %>%
  filter(dvid == "cp", evid == 0) %>%
  select(id, time, dv) %>%
  rename(conc = dv)

pd_data <- warfarin %>%
  filter(dvid == "pca", evid == 0) %>%
  select(id, time, dv) %>%
  rename(pca = dv)

# Get doses by subject
dose_data <- warfarin %>%
  filter(evid == 1) %>%
  group_by(id) %>%
  summarize(dose = sum(amt))

# Count number of observations per subject
pk_count <- pk_data %>%
  group_by(id) %>%
  summarize(n_pk = n())

pd_count <- pd_data %>%
  group_by(id) %>%
  summarize(n_pd = n())

# Combined counts
obs_count <- full_join(pk_count, pd_count, by = "id") %>%
  replace_na(list(n_pk = 0, n_pd = 0))

flextable(head(obs_count, 10)) %>%
  set_header_labels(id = "SUBJECTID", n_pk = "NO.PK.OBS", n_pd = "NO.PD.OBS") %>%
  autofit()
```

{{< pagebreak >}}

# Exploratory Analyses

### Figure 1. Plot concentration-time profiles by subject

```{r}
# Plot concentration-time profiles by subject
pk_plot <- ggplot(pk_data, aes(x = time, y = conc, group = id, color = factor(id))) +
  geom_line() +
  geom_point() +
  labs(title = "Warfarin Concentration-Time Profiles",
       x = "Time (hours)",
       y = "Concentration (mg/L)",
       color = "Subject") +
  theme_minimal()

pk_plot
```

### Figure 2. Concentration by dose

```{r}
# Plot concentration by dose
pk_dose_plot <- pk_data %>%
  left_join(dose_data, by = "id") %>%
  ggplot(aes(x = time, y = conc, color = factor(dose))) +
  geom_line(aes(group = id)) +
  geom_point() +
  labs(title = "Concentration-Time Profiles by Dose",
       x = "Time (hours)",
       y = "Concentration (mg/L)",
       color = "Dose (mg)") +
  theme_minimal()
pk_dose_plot
```

### Figure 3. PD response-time profiles by subject

```{r}
pd_plot <- ggplot(pd_data, aes(x = time, y = pca, group = id, color = factor(id))) +
  geom_line() +
  geom_point() +
  labs(title = "Prothrombin Complex Activity (PCA) Time Profiles",
       x = "Time (hours)",
       y = "PCA (%)",
       color = "Subject") +
  theme_minimal()

# Display plot
pd_plot
```

### Figure 4. PK-PD Relationship Exploration

```{r}
# Create a dataset with matched PK and PD data
pkpd_matched <- full_join(
  pk_data %>% rename(pk_time = time, pk_value = conc),
  pd_data %>% rename(pd_time = time, pd_value = pca),
  by = "id"
) %>%
  # For each subject and PD time point, find the closest PK time point
  group_by(id, pd_time) %>%
  mutate(time_diff = abs(pk_time - pd_time)) %>%
  filter(time_diff == min(time_diff)) %>%
  # If multiple PK points are equally close, take the average
  summarize(
    time = pd_time,
    conc = mean(pk_value, na.rm = TRUE),
    pca = mean(pd_value, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  # Remove entries with missing values
  filter(!is.na(conc) & !is.na(pca))

# Create a PK-PD relationship plot
pkpd_plot <- ggplot(pkpd_matched %>% filter(time > 0), aes(x = conc, y = pca,
                                                           color = factor(id))) +
  geom_point(size = 3, alpha = 0.7) +
  geom_path(aes(group = id), arrow = arrow(length = unit(0.2, "cm"), type = "closed"), alpha = 0.5) +
  labs(title = "PK-PD Relationship",
       subtitle = "Arrows indicate temporal direction",
       x = "Concentration (mg/L)",
       y = "PCA (%)",
       color = "Subject") +
  theme_minimal() +
  theme(legend.position = "none") +
  # Add a smoother to show the overall trend
  geom_smooth(method = "loess", se = TRUE, color = "black", linetype = "dashed", alpha = 0.3)

# Display plot
pkpd_plot
```

{{< pagebreak >}}

# One-Compartment PK Model Development

1.  First stage: Fit individual PK models for each subject
2.  Second stage: Analyze population distribution of parameters

### Fitting individual PK Model

### Table 2. Individual PK Model Fitting (Only 5 subjects displayed)

```{r}
# Get unique subject IDs
subject_ids <- unique(pk_data$id)

# Fit model for each subject
subject_fits <- lapply(subject_ids, fit_subject, data = pk_data, doses = dose_data)

# Remove NULL results (failed fits)
subject_fits <- subject_fits[!sapply(subject_fits, is.null)]

# Combine all parameter estimates
all_params <- do.call(rbind, lapply(subject_fits, function(x) x$params))

# Display individual parameters
flextable(head(all_params) %>% select(id, ka, ke, V, CL, half_life, AUC, Tmax, Cmax)) %>%
      set_caption(caption = "Individual PK Parameter Estimates") %>%
      colformat_double(digits = 2) %>%
  autofit()
```

### Table 3. Population PK Parameters

```{r}
# Calculate summary statistics for parameters
param_summary <- all_params %>%
  select(-id) %>%
  summarize(across(everything(), 
                  list(mean = mean, 
                       sd = sd, 
                       median = median, 
                       min = min, 
                       max = max,
                       cv_percent = ~sd(.)/mean(.)*100)))

# Reshape summary for display
param_summary_long <- param_summary %>%
  pivot_longer(cols = everything(),
               names_to = c("parameter", "stat"),
               names_pattern = "(.*)_(.*)",
               values_to = "value")

param_summary_wide <- param_summary_long %>%
  pivot_wider(names_from = stat, values_from = value) %>%
  filter(parameter %in% c("ka", "ke", "V", "CL", "half_life", "AUC"))

flextable(param_summary_wide) %>%
      set_caption(caption = "Population Summary of PK Parameterss") %>%
      colformat_double(digits = 2)

```

{{< pagebreak >}}

### Figure 5. Boxplots of parameter distributions

```{r}
# Create boxplots of parameter distributions
param_boxplots <- all_params %>%
  select(ka, ke, V, CL, half_life) %>%
  pivot_longer(cols = everything(), names_to = "parameter", values_to = "value") %>%
  ggplot(aes(x = parameter, y = value)) +
  geom_boxplot() +
  geom_jitter(width = 0.2, alpha = 0.5, color = "blue") +
  facet_wrap(~ parameter, scales = "free") +
  labs(title = "Distribution of PK Parameters Across Subjects",
       x = "Parameter",
       y = "Value") +
  theme_minimal()

param_boxplots
```

{{< pagebreak >}}

### PK Model Evaluation

### Figure 6. observed vs predicted across all subjects

```{r pk-evaluation}
# Create a data frame with all predictions for plotting
all_preds <- do.call(rbind, lapply(subject_fits, function(x) x$data))

# Plot observed vs predicted across all subjects
obs_pred_plot <- ggplot(all_preds, aes(x = pred, y = conc, color = factor(id))) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
  labs(title = "Observed vs Predicted Concentrations",
       x = "Predicted Concentration (mg/L)",
       y = "Observed Concentration (mg/L)",
       color = "Subject") +
  theme_minimal()

obs_pred_plot
```

### Figure 7. Time profiles for all subjects

```{r}
# Plot time profiles for all subjects
time_profiles <- ggplot(all_preds, aes(x = time, y = conc, color = factor(id))) +
  geom_point() +
  geom_line(aes(y = pred)) +
  labs(title = "Time Profiles for All Subjects",
       x = "Time (hours)",
       y = "Concentration (mg/L)",
       color = "Subject") +
  theme_minimal()

time_profiles
```

### Figure 8. Plot residuals

```{r}
# Plot residuals
residual_plot <- ggplot(all_preds, aes(x = pred, y = res, color = factor(id))) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residuals vs Predicted",
       x = "Predicted Concentration (mg/L)",
       y = "Residual (Observed - Predicted)",
       color = "Subject") +
  theme_minimal()

residual_plot
```

### Figure 9. Plot smooth prediction curves

```{r}
# Function to generate prediction curves
generate_curve <- function(id, fit, doses) {
  # Get parameters
  params <- coef(fit)
  ka <- params["ka"]
  ke <- params["ke"]
  V <- params["V"]
  
  # Get dose
  dose <- doses %>% filter(id == id) %>% pull(dose)
  
  # Generate time points
  time_pred <- seq(0, 144, length.out = 100)
  
  # Calculate concentrations
  conc_pred <- (dose * ka / (V * (ka - ke))) * (exp(-ke * time_pred) - exp(-ka * time_pred))
  
  # Return as data frame
  data.frame(
    id = id,
    time = time_pred,
    pred = conc_pred
  )
}

# Generate smooth prediction curves for each subject
pred_curves <- do.call(rbind, lapply(subject_fits, function(x) {
  generate_curve(x$id, x$fit, dose_data)
}))

# Plot smooth prediction curves
pred_plot <- ggplot() +
  geom_line(data = pred_curves, aes(x = time, y = pred, color = factor(id)), linewidth = 1) +
  geom_point(data = all_preds, aes(x = time, y = conc, color = factor(id))) +
  labs(title = "Model Predictions vs Observed Data",
       x = "Time (hours)",
       y = "Concentration (mg/L)",
       color = "Subject") +
  theme_minimal()

# Display the plot
pred_plot
```

### Figure 10. Individual Subject Plots

```{r individual-plots}
individual_plots <- lapply(subject_fits, function(x) {
  # Extract subject data
  subj_data <- x$data
  subj_id <- x$id
  
  # Generate smooth prediction curve
  curve_data <- generate_curve(subj_id, x$fit, dose_data)
  
  # Plot observed and predicted
  p <- ggplot() +
    geom_line(data = curve_data, aes(x = time, y = pred), color = "blue", linewidth = 1) +
    geom_point(data = subj_data, aes(x = time, y = conc), color = "red", size = 3) +
    labs(title = paste("Subject", subj_id),
         subtitle = paste("ka =", round(x$params$ka, 3), "h⁻¹, ke =", round(x$params$ke, 3), 
                          "h⁻¹, V =", round(x$params$V, 1), "L"),
         x = "Time (hours)",
         y = "Concentration (mg/L)") +
    theme_minimal()
  
  return(p)
})

individual_plots[1]
```

{{< pagebreak >}}

# PK/PD Relationship Analysis

### Figure 11. Linking PK Predictions to PD Observations

```{r}
# Generate PK predictions at PD observation times
pkpd_times <- pd_data %>%
  select(id, time) %>%
  distinct()

pk_at_pd <- lapply(subject_fits, function(x) {
  # Filter times for this subject
  subj_times <- pkpd_times %>% 
    filter(id == x$id) %>% 
    pull(time)
  
  # Generate predictions if there are any PD observations
  if(length(subj_times) > 0) {
    generate_pk_predictions(x$id, x$fit, dose_data, subj_times)
  } else {
    NULL
  }
})

# Combine predictions
pk_at_pd <- do.call(rbind, pk_at_pd[!sapply(pk_at_pd, is.null)])

# Merge PK predictions with PD observations
pkpd_data <- pk_at_pd %>%
  inner_join(pd_data, by = c("id", "time"))

pkpd_plot_scatter <- ggplot(pkpd_data, aes(x = pred_conc, y = pca, color = factor(id))) +
  geom_point(size = 2, alpha = 0.7) +
  geom_smooth(method = "loess", se = FALSE, color = "black", linetype = "dashed") +
  scale_x_log10(breaks = c(0.1, 1, 10)) +
  labs(title = "PK/PD Relationship - Overall Trend",
       x = "Log Predicted Concentration (mg/L)",
       y = "Response (%)",
       color = "Subject") +
  theme_minimal() +
  guides(color = guide_legend(override.aes = list(size = 3)))

pkpd_plot_scatter
```

### Figure 12. PK-PD relationship with time as a factor

```{r}
# Check for hysteresis by looking at the PK-PD relationship with time as a factor
hysteresis_plot <- ggplot(pkpd_data, aes(x = pred_conc, y = pca, color = time)) +
  geom_point(size = 3) +
  scale_color_viridis_c() +
  labs(title = "PK-PD Relationship Colored by Time",
       x = "Predicted Concentration (mg/L)",
       y = "PCA (%)",
       color = "Time (hours)") +
  theme_minimal() +
  facet_wrap(~id)

hysteresis_plot
```

### Indirect Response PD Model

The PK/PD relationship shows evidence of hysteresis, indicating a delayed response. This is typical for the drug, which inhibits the synthesis of clotting factors. An indirect response model is appropriate for this mechanism.

### Table 4. Summary of indirect response model

```{r pd-model}
# Get unique subject IDs in the PKPD data
pkpd_subject_ids <- unique(pkpd_data$id)

# Fit indirect response model for each subject
pd_fits <- lapply(pkpd_subject_ids, fit_indirect_response, pkpd_data = pkpd_data)

# Remove NULL results (failed fits)
pd_fits <- pd_fits[!sapply(pd_fits, is.null)]

# Combine all parameter estimates
pd_params <- do.call(rbind, lapply(pd_fits, function(x) x$params))

# Display individual PD parameters
kable(pd_params %>% select(id, kin, kout, ic50, half_life_pd), 
      caption = "Individual PD Parameter Estimates",
      digits = 3) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

# Calculate summary statistics for PD parameters
pd_summary <- pd_params %>%
  select(-id) %>%
  summarize(across(everything(), 
                  list(mean = mean, 
                       sd = sd, 
                       median = median, 
                       min = min, 
                       max = max,
                       cv_percent = ~sd(.)/mean(.)*100)))

# Reshape summary for display
pd_summary_long <- pd_summary %>%
  pivot_longer(cols = everything(),
               names_to = c("parameter", "stat"),
               names_pattern = "(.*)_(.*)",
               values_to = "value")

pd_summary_wide <- pd_summary_long %>%
  pivot_wider(names_from = stat, values_from = value) %>%
  filter(parameter %in% c("kin", "kout", "ic50", "half_life_pd"))

# Display parameter summary
# Convert PD summary to flextable, excluding the percent column
pd_summary_table <- pd_summary_wide %>%
  select(-percent) %>%  # Remove the percent column
  flextable() %>%
  set_caption("Population Summary of PD Parameters") %>%
  colformat_double(digits = 2) %>%
  autofit() %>%
  theme_vanilla() %>%
  set_header_labels(
    parameter = "Parameter",
    mean = "Mean",
    sd = "SD",
    median = "Median",
    min = "Min",
    max = "Max"
  )

pd_summary_table
```

### PD Model Evaluation

### Figure 13. Plot observed vs predicted PCA

```{r pd-evaluation}
# Create a data frame with all predictions for plotting
all_pd_preds <- do.call(rbind, lapply(pd_fits, function(x) x$data))

# Plot observed vs predicted PCA
pd_obs_pred_plot <- ggplot(all_pd_preds, aes(x = pred_pca, y = pca, color = factor(id))) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
  labs(title = "Observed vs Predicted PCA",
       x = "Predicted PCA (%)",
       y = "Observed PCA (%)",
       color = "Subject") +
  theme_minimal()
pd_obs_pred_plot
```

### Figure 14. Plot time profiles for all subjects

```{r}
# Plot time profiles for all subjects
pd_time_profiles <- ggplot(all_pd_preds, aes(x = time, y = pca, color = factor(id))) +
  geom_point() +
  geom_line(aes(y = pred_pca)) +
  labs(title = "PCA Time Profiles for All Subjects",
       x = "Time (hours)",
       y = "PCA (%)",
       color = "Subject") +
  theme_minimal()
pd_time_profiles
```

### Figure 15. Plot residuals

```{r}
# Plot residuals
pd_residual_plot <- ggplot(all_pd_preds, aes(x = pred_pca, y = res_pca, color = factor(id))) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "PD Residuals vs Predicted",
       x = "Predicted PCA (%)",
       y = "Residual (Observed - Predicted)",
       color = "Subject") +
  theme_minimal()

# Display plots
pd_obs_pred_plot
pd_time_profiles
pd_residual_plot
```

### Figure 16. Individual Subject PD Plots

```{r individual-pd-plots}
# Create individual plots for each subject
individual_pd_plots <- lapply(pd_fits, function(x) {
  # Extract subject data
  subj_data <- x$data
  subj_id <- x$id
  
  # Plot observed and predicted
  p <- ggplot(subj_data) +
    geom_line(aes(x = time, y = pred_pca), color = "blue", linewidth = 1) +
    geom_point(aes(x = time, y = pca), color = "red", size = 3) +
    labs(title = paste("Subject", subj_id, "- PD"),
         subtitle = paste("kin =", round(x$params$kin, 2), "%/h, kout =", round(x$params$kout, 3), 
                         "h⁻¹, IC50 =", round(x$params$ic50, 2), "mg/L"),
         x = "Time (hours)",
         y = "PCA (%)") +
    theme_minimal()
  
  return(p)
})

# Display individual plots (arrange in a grid)
individual_pd_plots[1]
```

# Integrated PK/PD Analysis

Combine findings from both the PK and PD analyses to gain a comprehensive understanding of the the drug system.

### Figure 17. Parameter Correlations

```{r parameter-correlations}
# Join PK and PD parameters
combined_params <- all_params %>%
  select(id, ka, ke, V, CL, half_life) %>%
  inner_join(pd_params %>% select(id, kin, kout, ic50, half_life_pd), by = "id")

# Calculate correlation matrix
cor_matrix <- cor(combined_params %>% select(-id))

# Plot correlation matrix
corrplot::corrplot(cor_matrix, method = "color", type = "upper", 
                  tl.col = "black", tl.srt = 45,
                  title = "Correlation Between PK and PD Parameters")

# Calculate the ratio of half-lives (PD/PK)
combined_params$halflife_ratio <- combined_params$half_life_pd / combined_params$half_life

# Display ratios
kable(combined_params %>% select(id, half_life, half_life_pd, halflife_ratio), 
      caption = "PK/PD Half-life Ratios",
      digits = 3) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

### Simulations for Different Doses

### Figure 18. Plot PK profiles for different doses by simulation

```{r dose-simulations}
# Use mean parameters for simulations
mean_pk_params <- data.frame(
  ka = mean(all_params$ka),
  ke = mean(all_params$ke),
  V = mean(all_params$V)
)

mean_pd_params <- data.frame(
  kin = mean(pd_params$kin),
  kout = mean(pd_params$kout),
  ic50 = mean(pd_params$ic50)
)

# Simulate different doses
doses <- c(10, 25, 50, 75, 100, 150, 200)
dose_sims <- lapply(doses, simulate_pkpd, 
                   pk_params = mean_pk_params,
                   pd_params = mean_pd_params)

# Combine results
dose_sim_data <- do.call(rbind, dose_sims)

# Plot PK profiles for different doses
dose_pk_plot <- ggplot(dose_sim_data, aes(x = time, y = conc, color = factor(dose))) +
  geom_line() +
  labs(title = "PK Profiles for Different Doses",
       x = "Time (hours)",
       y = "Concentration (mg/L)",
       color = "Dose (mg)") +
  theme_minimal()
dose_pk_plot
```

### Figure 19. Plot PD profiles for different doses by simulation

```{r}
# Plot PD profiles for different doses
dose_pd_plot <- ggplot(dose_sim_data, aes(x = time, y = pca, color = factor(dose))) +
  geom_line() +
  labs(title = "PD Profiles for Different Doses",
       x = "Time (hours)",
       y = "PCA (%)",
       color = "Dose (mg)") +
  theme_minimal()

dose_pd_plot
```

### Table 6. PD metrics for each dose

```{r}
# Calculate PD metrics for each dose
pd_metrics <- dose_sim_data %>%
  group_by(dose) %>%
  summarize(
    min_PCA = min(pca),
    time_to_min_PCA = time[which.min(pca)],
    final_PCA = pca[time == max(time)],
    duration_below_30 = sum(diff(time)[pca[-length(pca)] < 30])
  )

pd_metrics_table <- pd_metrics %>%
  flextable() %>%
  set_caption("Dose-Response Metrics") %>%
  colformat_double(digits = 1) %>%
  set_header_labels(
    dose = "Dose (mg)",
    min_PCA = "Min PCA (%)",
    time_to_min_PCA = "Time to Min PCA (hr)",
    final_PCA = "Final PCA (%)",
    duration_below_30 = "Duration Below 30% (hr)"
  ) %>%
  autofit() %>%
  theme_vanilla()

pd_metrics_table
```

### Figure 20. Simulated dose-response curve

```{r}
# Create a dose-response curve
dr_plot <- ggplot(pd_metrics, aes(x = dose, y = min_PCA)) +
  geom_point(size = 3) +
  geom_line() +
  labs(title = "Dose-Response Relationship",
       x = "Dose (mg)",
       y = "Minimum PCA (%)") +
  theme_minimal()

# Display the dose-response curve
dr_plot
```

### Optimal Dosing Regimen Selection

### Table 7. Dose evaluation table

```{r optimal-dosing}
# Determine a target PCA range
target_min <- 20
target_max <- 40

# Evaluate how well each dose meets the target
dose_evaluation <- pd_metrics %>%
  mutate(
    in_target = min_PCA >= target_min & min_PCA <= target_max,
    below_target = min_PCA < target_min,
    above_target = min_PCA > target_max
  )

# Display the dose evaluation table
dose_evaluation_table <- dose_evaluation %>%
  mutate(
    # Convert logical values to Yes/No for better readability
    in_target = ifelse(in_target, "Yes", "No"),
    below_target = ifelse(below_target, "Yes", "No"),
    above_target = ifelse(above_target, "Yes", "No")
  ) %>%
  flextable() %>%
  set_caption("Dose Evaluation for Target PCA Range of 20-40%") %>%
  colformat_double(j = c("min_PCA", "time_to_min_PCA", "final_PCA", "duration_below_30"), digits = 1) %>%
  set_header_labels(
    dose = "Dose (mg)",
    min_PCA = "Min PCA (%)",
    time_to_min_PCA = "Time to Min PCA (hr)",
    final_PCA = "Final PCA (%)",
    duration_below_30 = "Duration Below 30% (hr)",
    in_target = "In Target Range",
    below_target = "Below Target",
    above_target = "Above Target"
  ) %>%
  autofit() %>%
  theme_vanilla() %>%
  align(align = "center", part = "all")

dose_evaluation_table

```

### Figure 21 Find the optimal dose closest to target range

```{r}
# Find the optimal dose (closest to target range)
if (any(dose_evaluation$in_target)) {
  optimal_dose <- dose_evaluation$dose[dose_evaluation$in_target]
  optimal_message <- paste("Optimal dose(s) within target range:", paste(optimal_dose, collapse = ", "), "mg")
} else {
  # Find dose with min_PCA closest to target range
  if (all(dose_evaluation$below_target)) {
    optimal_dose <- dose_evaluation$dose[which.max(dose_evaluation$min_PCA)]
    optimal_message <- paste("No dose within target range. Closest dose:", optimal_dose, "mg (below target)")
  } else {
    optimal_dose <- dose_evaluation$dose[which.min(dose_evaluation$min_PCA)]
    optimal_message <- paste("No dose within target range. Closest dose:", optimal_dose, "mg (above target)")
  }
}

# Display optimal dose
cat(optimal_message, "\n")

# If we found an optimal dose, simulate different regimens
if (exists("optimal_dose") && length(optimal_dose) > 0) {
  # Take the first optimal dose if multiple
  opt_dose <- optimal_dose[1]
  
  # Simulate different dosing schedules
  qd <- simulate_multiple_dosing(opt_dose, 24)    # Once daily
  bid <- simulate_multiple_dosing(opt_dose, 12)    # Twice daily
  tid <- simulate_multiple_dosing(opt_dose, 8)     # Three times daily
  
  # Combine results
  schedule_results <- rbind(qd, bid, tid)
  
  # Plot PD profiles for different schedules
  schedule_plot <- ggplot(schedule_results, aes(x = time, y = pca, color = regimen)) +
    geom_line() +
    geom_hline(yintercept = c(target_min, target_max), linetype = "dashed", color = "red") +
    annotate("rect", xmin = -Inf, xmax = Inf, ymin = target_min, ymax = target_max, 
             alpha = 0.1, fill = "green") +
    labs(title = paste0("PD Profiles for Different Dosing Schedules with ", opt_dose, " mg Total Daily Dose"),
         subtitle = paste0("Target PCA Range: ", target_min, "% - ", target_max, "%"),
         x = "Time (hours)",
         y = "PCA (%)",
         color = "Regimen") +
    theme_minimal()
  
  print(schedule_plot)
  
  # Calculate metrics for each schedule
  schedule_metrics <- schedule_results %>%
    group_by(regimen) %>%
    summarize(
      min_PCA = min(pca),
      mean_PCA = mean(pca),
      fluctuation = max(pca) - min(pca),
      time_below_target = sum(diff(time)[pca[-length(pca)] < target_min]),
      time_in_target = sum(diff(time)[pca[-length(pca)] >= target_min & pca[-length(pca)] <= target_max]),
      time_above_target = sum(diff(time)[pca[-length(pca)] > target_max]),
      pct_time_in_target = 100 * time_in_target / (time_below_target + time_in_target + time_above_target)
    )
  
  # Display metrics
  kable(schedule_metrics, 
      caption = paste0("Dosing Schedule Evaluation for ", opt_dose, " mg Total Daily Dose"), 
      digits = 1) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
}
```

# Conclusions

Based on our comprehensive PK/PD analysis of the drug using the two-stage approach, we can draw the following conclusions:

1.  **Pharmacokinetics**: the drug follows a one-compartment model with first-order absorption and elimination. The population mean values for key parameters are:

    -   Absorption rate constant (ka): `r round(mean(all_params$ka), 3)` h⁻¹
    -   Elimination rate constant (ke): `r round(mean(all_params$ke), 3)` h⁻¹
    -   Volume of distribution (V): `r round(mean(all_params$V), 1)` L
    -   Clearance (CL): `r round(mean(all_params$CL), 3)` L/h
    -   Elimination half-life: `r round(mean(all_params$half_life), 1)` h

2.  **Pharmacodynamics**: The PD response (prothrombin complex activity, PCA) follows an indirect response model where the drug inhibits the input rate. The population mean values for key parameters are:

    -   Input rate constant (kin): `r round(mean(pd_params$kin), 2)` %/h
    -   Output rate constant (kout): `r round(mean(pd_params$kout), 3)` h⁻¹
    -   IC50: `r round(mean(pd_params$ic50), 2)` mg/L
    -   Response half-life: `r round(mean(pd_params$half_life_pd), 1)` h

3.  **PK/PD Relationship**: There is a clear hysteresis in the PK/PD relationship, indicating a delayed response. The PD effect typically lags behind the PK profile, with the PD half-life being longer than the PK half-life by a factor of approximately `r round(mean(combined_params$halflife_ratio), 1)`.

4.  **Dose-Response Relationship**: Based on our simulations, doses between `r min(optimal_dose)` and `r max(optimal_dose)` mg provide the best balance of efficacy (maintaining PCA in the target range of 20-40%) and safety.

5.  **Optimal Dosing Regimen**: For the optimal dose, a divided dosing regimen (BID or TID) provides a more stable PCA profile with less fluctuation compared to once-daily dosing, resulting in a higher percentage of time in the target range.

These findings provide valuable insights into the drug's PK/PD behavior and can inform dosing decisions in clinical practice. The two-stage approach, while simpler than a full population analysis, still captures the essential features of the system and provides reasonable parameter estimates.

# References

1.  Holford NH. Clinical pharmacokinetics and pharmacodynamics of the drug. Understanding the dose-effect relationship. Clin Pharmacokinet. 1986;11(6):483-504.

2.  Jusko WJ, Ko HC. Physiologic indirect response models characterize diverse types of pharmacodynamic effects. Clin Pharmacol Ther. 1994;56(4):406-419.

3.  Gabrielsson J, Weiner D. Pharmacokinetic and Pharmacodynamic Data Analysis: Concepts and Applications. 5th ed. Swedish Pharmaceutical Press; 2016.

4.  Pinheiro JC, Bates DM. Mixed-Effects Models in S and S-PLUS. Springer; 2000.

5.  Dayneka NL, Garg V, Jusko WJ. Comparison of four basic models of indirect pharmacodynamic responses. J Pharmacokinet Biopharm. 1993;21(4):457-478.
